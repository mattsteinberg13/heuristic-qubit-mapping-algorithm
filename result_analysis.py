import matplotlib
import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np
import scipy
###################################################################################################
#####################################non-linear algorithms#########################################
####### 4-qubit
# values = [0.935,0.90,0.837,0.959,0.93,0.874,0.954,0.921,0.87,0.941,0.897,0.849]
# colors = ['r','g','b','r','g','b','r','g','b','r','g','b']
# range = ('BFS-A','Heuristic-A','Trivial-A','BFS-B','Heuristic-B','Trivial-B','BFS-C','Heuristic-C','Trivial-C','BFS-D','Heuristic-D','Trivial-D')
# bars = plt.bar(range,values,width=0.90,align='center',alpha=0.5,color=colors)
# for bar in bars:
#     yval = bar.get_height()
#     plt.text(bar.get_x(), yval + .005, yval)
# plt.xticks(range,fontsize=7,rotation=45)
# plt.ylim(0.0, 1.0)
# plt.title('Success-Rate Results, 4-Qubit Linear/Nonlinear Algorithms')

####### 6-qubit
# values = [0.896,0.866,0.807,0.942,0.902,0.854,0.939,0.887,0.853,0.928,0.878,0.858,0.918,0.853,0.822,0.905,0.842,0.802,0.897,0.817,0.795,0.891,0.809,0.8,0.894,0.815,0.797]
# colors = ['r','g','b','r','g','b','r','g','b','r','g','b','r','g','b','r','g','b','r','g','b','r','g','b','r','g','b']
# range = ('BFS-E','Heuristic-E','Trivial-E','BFS-F','Heuristic-F','Trivial-F','BFS-G','Heuristic-G','Trivial-G','BFS-H','Heuristic-H','Trivial-H','BFS-I','Heuristic-I','Trivial-I','BFS-J','Heuristic-J','Trivial-J','BFS-K','Heuristic-K','Trivial-K','BFS-L','Heuristic-L','Trivial-L','BFS-M','Heuristic-M','Trivial-M')
# bars = plt.bar(range,values,width=0.90,align='center',alpha=0.5,color=colors)
# for bar in bars:
#     yval = bar.get_height()
#     plt.text(bar.get_x(), yval + .005, yval)
# plt.xticks(range,fontsize=7,rotation=45)
# plt.ylim(0.0, 1.0)
# plt.title('Success-Rate Results, 6-Qubit Linear/Nonlinear Algorithms')

####### 8-qubit
# values = [0.848,0.801,0.735,0.899,0.869,0.821,0.895,0.85,0.797,0.892,0.853,0.81,0.879,0.837,0.789]
# colors = ['r','g','b','r','g','b','r','g','b','r','g','b','r','g','b']
# range = ('BFS-A','Heuristic-A','Trivial-A','BFS-B','Heuristic-B','Trivial-B','BFS-C','Heuristic-C','Trivial-C','BFS-D','Heuristic-D','Trivial-D','BFS-E','Heuristic-E','Trivial-E')
# bars = plt.bar(range,values,width=0.90,align='center',alpha=0.5,color=colors)
# for bar in bars:
#     yval = bar.get_height()
#     plt.text(bar.get_x(), yval + .005, yval)
# plt.xticks(range,fontsize=7,rotation=45)
# plt.ylim(0.0, 1.0)
# plt.title('Success-Rate Results, 8-Qubit Linear/Nonlinear Algorithms')

#####################################depth algorithms 
####### 4-qubit
# values = [0.939,0.903,0.814,0.934,0.884,0.799,0.922,0.866,0.782,0.90,0.822,0.755]
# colors = ['r','g','b','r','g','b','r','g','b','r','g','b']
# range = ('BFS-A','Heuristic-A','Trivial-A','BFS-B','Heuristic-B','Trivial-B','BFS-C','Heuristic-C','Trivial-C','BFS-D','Heuristic-D','Trivial-D')
# bars = plt.bar(range,values,width=0.90,align='center',alpha=0.5,color=colors)
# for bar in bars:
#     yval = bar.get_height()
#     plt.text(bar.get_x(), yval + .005, yval)
# plt.xticks(range,fontsize=7,rotation=45)
# plt.ylim(0.0, 1.0)
# plt.title('Success-Rate Results, 4-Qubit Depth Algorithms')

####### 6-qubit
# values = [0.918,0.867,0.826,0.912,0.846,0.756,0.905,0.811,0.756,0.884,0.783,0.763,0.862,0.738,0.721,0.846,0.739,0.703,0.833,0.699,0.663,0.825,0.683,0.677,0.813,0.671,0.649]
# colors = ['r','g','b','r','g','b','r','g','b','r','g','b','r','g','b','r','g','b','r','g','b','r','g','b','r','g','b']
# print(len(values),len(colors))
# range = ('BFS-E','Heuristic-E','Trivial-E','BFS-F','Heuristic-F','Trivial-F','BFS-G','Heuristic-G','Trivial-G','BFS-H','Heuristic-H','Trivial-H','BFS-I','Heuristic-I','Trivial-I','BFS-J','Heuristic-J','Trivial-J','BFS-K','Heuristic-K','Trivial-K','BFS-L','Heuristic-L','Trivial-L','BFS-M','Heuristic-M','Trivial-M')
# bars = plt.bar(range,values,width=0.90,align='center',alpha=0.5,color=colors)
# for bar in bars:
#     yval = bar.get_height()
#     plt.text(bar.get_x(), yval + .005, yval)
# plt.xticks(range,fontsize=7,rotation=45)
# plt.ylim(0.0, 1.0)
# plt.title('Success-Rate Results, 6-Qubit Depth Algorithms')

####### 8-qubit
# values = [0.891,0.852,0.794,0.85,0.782,0.71,0.836,0.755,0.663,0.83,0.764,0.698,0.805,0.742,0.655]
# colors = ['r','g','b','r','g','b','r','g','b','r','g','b','r','g','b']
# range = ('BFS-A','Heuristic-A','Trivial-A','BFS-B','Heuristic-B','Trivial-B','BFS-C','Heuristic-C','Trivial-C','BFS-D','Heuristic-D','Trivial-D','BFS-E','Heuristic-E','Trivial-E')
# bars = plt.bar(range,values,width=0.90,align='center',alpha=0.5,color=colors)
# for bar in bars:
#     yval = bar.get_height()
#     plt.text(bar.get_x(), yval + .005, yval)
# plt.xticks(range,fontsize=7,rotation=45)
# plt.ylim(0.0, 1.0)
# plt.title('Success-Rate Results, 8-Qubit Depth Algorithms')

###################################################################################################
#################################LINE GRAPHS#######################################################
#######4 nonlinear
# valuesbfs = [0.978,0.971,0.967,0.958]
# valuesheuristic = [0.964,0.958,0.942,0.929]
# valuestrivial = [0.939,0.923,0.902,0.886]
#######4 nonlinear depth
# valuesbfs = [0.97,0.959,0.949,0.932]
# valuesheuristic = [0.952,0.934,0.909,0.881]
# valuestrivial = [0.924,0.888,0.848,0.819]
#######4 nonlinear depth - 4x
# valuesbfs = [0.9548650844354631, 0.9359466619355767, 0.9180807228003363, 0.8923211380325143]
# valuesheuristic = [0.9293491680084052, 0.8960081425499345, 0.8455123288383574, 0.7888462837546864]
# valuestrivial = [0.8923239508445987, 0.8215589647910196, 0.7601101392949434, 0.7036846592606976]
# ###
# range = [0,1,2,3]
# yrange = [0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1.0]
# plt.plot(range,valuesbfs,'rs--',fillstyle='none',label="$\sigma_{BFS}$")
# plt.plot(range,valuesheuristic,'bs--',fillstyle='none',label="$\sigma_{heuristic}$")
# plt.plot(range,valuestrivial,'gs--',fillstyle='none',label="$\sigma_{trivial}$")
# plt.xticks(range,fontsize=7,rotation=45)
# plt.title('Success-Rate, 4-Qubit Depth Algorithms')
# plt.ylabel(r'$\{\sigma_{BFS},\sigma_{heuristic},\sigma_{trivial}\}$')
# plt.xlabel(r'Number of Nonlinear Edges')

##################6 nonlinear - sequence 1
# valuesbfs = [0.96,0.954,0.949,0.941,0.932,0.922,0.915,0.909,0.903,0.885,0.878]
# valuesheuristic = [0.941,0.928,0.919,0.91,0.899,0.88,0.86,0.855,0.842,0.816,0.795]
# valuestrivial = [0.928,0.925,0.9,0.888,0.871,0.85,0.851,0.84,0.814,0.8,0.785]
##################6 nonlinear - sequence 1 - depth
# valuesbfs = [0.944,0.931,0.923,0.913,0.893,0.878,0.865,0.844,0.847,0.825,0.796]
# valuesheuristic = [0.915,0.897,0.873,0.851,0.836,0.798,0.765,0.73,0.73,0.701,0.661]
# valuestrivial = [0.904,0.894,0.855,0.829,0.792,0.767,0.757,0.716,0.704,0.678,0.636]
##################6 nonlinear - sequence 1 - depth 4x
# valuesbfs = [0.9169485935683618, 0.8971423470031135, 0.88003009248827, 0.8589492488283725, 0.8192262625988198, 0.7834356849574325, 0.7759084860018342, 0.7335241498545484, 0.7027468344771732, 0.685413814120035, 0.6448843735893546]
# valuesheuristic = [ 0.8676476233642818, 0.8258028829318078, 0.7891846627388869, 0.7612575794868448, 0.7130603985860553, 0.657010802448648, 0.6187270185810083, 0.5691250610130049, 0.5293938823017867, 0.5036483516056802, 0.4440369797517366]
# valuestrivial = [0.85856556269371, 0.838175153197727, 0.770730046968249, 0.7131078480755074, 0.6552733932969921, 0.6062544589063149, 0.6140226730235256, 0.5573850256783418, 0.5044985617192972, 0.4744238997778936, 0.43065924875810974]
##################6 nonlinear - sequence 2
# valuesbfs = [0.959,0.953,0.948,0.938,0.932,0.926,0.917,0.911,0.901,0.885,0.88]
# valuesheuristic = [0.94,0.93,0.917,0.906,0.892,0.875,0.854,0.852,0.84,0.814,0.797]
# valuestrivial = [0.929,0.924,0.905,0.888,0.872,0.852,0.85,0.833,0.821,0.793,0.785]
##################6 nonlinear - sequence 2 - depth
# valuesbfs = [0.96,0.954,0.928,0.907,0.906,0.879,0.867,0.85,0.838,0.809,0.799]
# valuesheuristic = [0.915,0.897,0.877,0.835,0.845,0.786,0.756,0.749,0.719,0.689,0.652]
# valuestrivial = [0.905,0.895,0.865,0.826,0.827,0.768,0.757,0.719,0.7,0.671,0.638]
##################6 nonlinear - sequence 2 - depth 4x
# valuesbfs = [0.9169485935683618, 0.8971423470031135,0.8808037360718314, 0.8611442238429777, 0.8506734804629346, 0.797393837686289, 0.7812331400124987, 0.7317817066527033, 0.7232996835733689, 0.6931254304067691, 0.6623179728752606]
# valuesheuristic = [0.8676476233642818, 0.8258028829318078,0.7827281241691046, 0.7500791732233618, 0.7462648708681314, 0.6380762556575528, 0.6107405298468115, 0.5723627576600975, 0.5344553458220096, 0.4994094364083419, 0.4667947682607576]
# valuestrivial = [0.85856556269371, 0.838175153197727,0.7755918171814102, 0.7169729509419988, 0.7153216076693083, 0.6125132946791769, 0.6104406905985152, 0.54932849154302, 0.5041503070271715, 0.48805456962024674, 0.4426552458094488]
# ###
# range = [0,1,2,3,4,5,6,7,8,9,10]
# yrange = [0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1.0]
# plt.plot(range,valuesbfs,'rs--',fillstyle='none',label="$\sigma_{BFS}$")
# plt.plot(range,valuesheuristic,'bs--',fillstyle='none',label="$\sigma_{heuristic}$")
# plt.plot(range,valuestrivial,'gs--',fillstyle='none',label="$\sigma_{trivial}$")
# plt.xticks(range,fontsize=7,rotation=45)
# plt.title('Success-Rate, 6-Qubit Depth Algorithms')
# plt.ylabel(r'$\{\sigma_{BFS},\sigma_{heuristic},\sigma_{trivial}\}$')
# plt.xlabel(r'Number of Nonlinear Edges')

##################8 nonlinear - sequence 1
# valuesbfs = [0.939,0.934,0.928,0.92,0.909,0.898,0.88,0.875,0.87,0.856,0.848,0.836,0.823,0.812,0.809,0.799,0.781,0.773,0.76,0.747,0.73]
# valuesheuristic = [0.92,0.909,0.897,0.891,0.874,0.871,0.851,0.839,0.83,0.802,0.791,0.775,0.759,0.734,0.733,0.716,0.688,0.678,0.658,0.64,0.627]
# valuestrivial = [0.909,0.903,0.882,0.886,0.849,0.845,0.826,0.81,0.811,0.786,0.779,0.766,0.748,0.722,0.725,0.705,0.681,0.663,0.652,0.652,0.632]
##################8 nonlinear - sequence 1 - depth
# valuesbfs = [0.915,0.902,0.891,0.883,0.862,0.837,0.814,0.795,0.783,0.772,0.763,0.724,0.71,0.691,0.685,0.658,0.635,0.619,0.6,0.587,0.558]
# valuesheuristic = [0.881,0.865,0.835,0.833,0.803,0.775,0.761,0.736,0.704,0.679,0.661,0.621,0.595,0.574,0.557,0.533,0.503,0.472,0.449,0.433,0.4]
# valuestrivial = [0.884,0.849,0.815,0.789,0.757,0.743,0.722,0.689,0.681,0.66,0.633,0.613,0.577,0.559,0.536,0.516,0.49,0.468,0.449,0.437,0.42]
##################8 nonlinear - sequence 1 - depth - 4x
# valuesbfs = [0.8697600034763958, 0.8431460751350239, 0.8276430600906997, 0.7997786690778684, 0.7771093699652846, 0.7424899266203633, 0.6818280006222049, 0.6607044489762995, 0.651412253102903, 0.6173887087146894, 0.5908849756199076, 0.5377760095346636, 0.5341055333291773, 0.49466684434181807, 0.4833996270799338, 0.43878403728507265, 0.41736418436068345, 0.41445067148898446, 0.38773206207328603, 0.35985795627811107, 0.3620049409212569]
# valuesheuristic = [0.8034022867811165, 0.7644898697533996, 0.7358620188974304, 0.7076136928084577, 0.6505608207033491, 0.6355828165801948, 0.6078614599236686, 0.5662994139815675, 0.5350093491801986, 0.4872451877147189, 0.4495682891964916, 0.39889520525806327, 0.3897846727879775, 0.34183643261356444, 0.3335855369505336, 0.28799029591561603, 0.2583057912770758, 0.24498497857067697, 0.21576228722239194, 0.20065401196785398, 0.18761295576360315]
# valuestrivial = [0.8164239017164293, 0.7470078851159723, 0.696215137256182, 0.6494483869343487, 0.5926012214546873, 0.5861795768207217, 0.5370165599876784, 0.5006686632186567, 0.4914601530484001, 0.44704817693270826, 0.42935332790375613, 0.37852186702655727, 0.35104150983001764, 0.32375112416150903, 0.30296721742405625, 0.2776184914363889, 0.24769429907323423, 0.23207187678112975, 0.20894479128679305, 0.20684341549205, 0.21431267912549373]
##################8 nonlinear - sequence 2
# valuesbfs = [0.939,0.934,0.929,0.92,0.915,0.905,0.902,0.885,0.88,0.873,0.862,0.859,0.848,0.835,0.832,0.81,0.797,0.779,0.772,0.757,0.736]
# valuesheuristic = [0.92,0.909,0.897,0.88,0.856,0.846,0.833,0.812,0.797,0.775,0.77,0.766,0.746,0.729,0.723,0.698,0.677,0.664,0.652,0.636,0.615]
# valuestrivial = [0.909,0.903,0.886,0.867,0.853,0.829,0.828,0.811,0.797,0.792,0.787,0.787,0.769,0.76,0.752,0.718,0.698,0.676,0.664,0.655,0.63]
##################8 nonlinear - sequence 2 - depth
# valuesbfs = [0.912,0.901,0.896,0.879,0.87,0.844,0.848,0.811,0.805,0.781,0.765,0.758,0.753,0.741,0.716,0.688,0.671,0.636,0.63,0.605,0.591]
# valuesheuristic = [0.88,0.863,0.837,0.802,0.772,0.734,0.738,0.687,0.663,0.624,0.621,0.605,0.591,0.564,0.558,0.516,0.492,0.464,0.455,0.43,0.395]
# valuestrivial = [0.883,0.85,0.818,0.782,0.758,0.724,0.722,0.683,0.66,0.649,0.65,0.647,0.612,0.6,0.576,0.542,0.511,0.485,0.485,0.456,0.426]
##################8 nonlinear - sequence 2 - depth - 4x
# valuesbfs = [0.8697600034763958, 0.8431460751350239,0.8314810282801018, 0.8115214161199126, 0.7881286677637692, 0.7519212376050888, 0.7250635465378695, 0.703550979491741, 0.6598348783968829, 0.6531566106445844, 0.621201392624997, 0.5972765028462862, 0.5895778468797377, 0.5493448861593483, 0.5274162361589994, 0.49589349958699935, 0.46478513008368594, 0.4607686477600339, 0.4446350737284378, 0.4084805509827833, 0.3505382237875637]
# valuesheuristic = [0.8034022867811165, 0.7644898697533996,0.720617113208161, 0.6877101842429697, 0.6342828213169611, 0.5753457860893596, 0.5248913884309866, 0.4926586462031027, 0.43977461553708497, 0.4177502661388664, 0.3996181862775138, 0.37583079758619137, 0.3640328464525431, 0.32146531811317763, 0.31414947103590224, 0.2701525058813492, 0.25292758405647686, 0.23443752860746003, 0.22435545965852033, 0.20040378463634007, 0.16881269149414385]
# valuestrivial = [0.8164239017164293, 0.7470078851159723,0.6982216305663971, 0.652278145825322, 0.612522978004605, 0.5479337796075564, 0.54114252262621, 0.5027506974336057, 0.4484909019644646, 0.4526310594373549, 0.44136906084652006, 0.4378217895728423, 0.39599532758098016, 0.3569598373343544, 0.3345531261637787, 0.31615016821572334, 0.2783042225231018, 0.2635270269205756, 0.2401943268561739, 0.22634168969205756, 0.1915348262031489]
# ###
# range = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
# yrange = [0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1.0]
# plt.plot(range,valuesbfs,'rs--',fillstyle='none',label="$\sigma_{BFS}$")
# plt.plot(range,valuesheuristic,'bs--',fillstyle='none',label="$\sigma_{heuristic}$")
# plt.plot(range,valuestrivial,'gs--',fillstyle='none',label="$\sigma_{trivial}$")
# plt.xticks(range,fontsize=7,rotation=45)
# plt.title('Success-Rate, 8-Qubit Depth Algorithms')
# plt.ylabel(r'$\{\sigma_{BFS},\sigma_{heuristic},\sigma_{trivial}\}$')
# plt.xlabel(r'Number of Nonlinear Edges')

###################################################################################################
########Large-Linear algorithms####################################################################
# values3 = [0.031,0.026,0.018,0.016,0.005,-0.002,-0.011]
# values4 = [0.060,0.055,0.049,0.045,0.039,0.032,0.028,-0.006,-0.022]
# values5 = [0.090,0.080,0.080,0.076,0.061,0.035,0.010,-0.034]
# values6 = [0.121,0.11,0.09,0.064,0.037,0.005,-0.029,0.043]
# values7 = [0.159,0.135,0.108,0.093,0.072,0.042,0.017,-0.010,-0.037]
# values8 = [0.178,0.169,0.138,0.12,0.102,0.081,0.057,0.030,0.007,-0.016,-0.039]
# values9 = [0.2177,0.188,0.179,0.154,0.125,0.115,0.086,0.062,0.042,-0.003,0.013,-0.017,-0.037,-0.041]
# values10 = [0.241,0.230,0.204,0.180,0.160,0.140,0.111,0.097,0.082,0.064,0.047,0.029,0.010,-0.003,-0.024,-0.043]
# range3 = [0.333,0.444,0.555,0.666,0.777,0.888,1.0]
# range4 = [0.25,0.3125,0.375,0.4375,0.50,0.5625,0.625,0.9375,1.0]
# range5 = [0.24,0.28,0.32,0.36,0.4,0.6,0.8,1.0]
# range6 = [0.25,0.277,0.4166,0.555,0.694,0.8333,0.9722,1.0]
# range7 = [0.2041,0.306,0.408,0.5103,0.612,0.714,0.816,0.918,1.0]
# range8 = [0.25,0.3125,0.391,0.4688,0.546,0.625,0.703,0.781,0.859,0.9375,1.0]
# range9 = [0.247,0.308,0.371,0.432,0.490,0.555,0.617,0.679,0.741,0.802,0.864,0.926,0.987,1.0]
# range10 = [0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1.0]
################################increased error rates - exponential################################
# values3 = [0.031,0.026,0.018,0.016,0.005,-0.002,-0.011]
# values4 = [0.119,0.103,0.093,0.079,0.072,0.060,0.048,-0.010,-0.033]
# values5 = [0.262,0.235,0.222,0.202,0.168,0.095,0.017,-0.048]
# values6 = [0.348,0.255,0.147,0.085,0.033,0.005,-0.001,-0.009]
# range3 = [0.333,0.444,0.555,0.666,0.777,0.888,1.0]
# range4 = [0.25,0.3125,0.375,0.4375,0.50,0.5625,0.625,0.9375,1.0]
# range5 = [0.24,0.28,0.32,0.36,0.4,0.6,0.8,1.0]
# range6 = [0.25,0.277,0.4166,0.555,0.694,0.8333,0.9722,1.0]
###############################increased error rates#-uniform######################################
# values3 = [0.113,0.094,0.065,0.042,0.013,0.003,-0.016]
# values4 = [0.206,0.173,0.163,0.139,0.120,0.090,0.067,-0.015,-0.035]
# values5 = [0.266,0.245,0.227,0.206,0.165,0.081,0.015,-0.045]
# values6 = [0.318,0.249,0.173,0.104,0.053,0.010,-0.032,-0.042]
# values7 = [0.346,0.255,0.172,0.122,0.087,0.045,0.011,-0.005,-0.026]
# range3 = [0.333,0.444,0.555,0.666,0.777,0.888,1.0]
# range4 = [0.25,0.3125,0.375,0.4375,0.50,0.5625,0.625,0.9375,1.0]
# range5 = [0.24,0.28,0.32,0.36,0.4,0.6,0.8,1.0]
# range6 = [0.25,0.277,0.4166,0.555,0.694,0.8333,0.9722,1.0]
# range7 = [0.2041,0.306,0.408,0.5103,0.612,0.714,0.816,0.918,1.0]

# yrange = [-0.2,-0.15,-0.1,-0.05,0.0,0.05,0.1,0.15,0.2,0.25,0.3]
# plt.plot(range3,values3,'rs--',fillstyle='none',label="3x3")
# plt.plot(range4,values4,'bs--',fillstyle='none',label="4x4")
# plt.plot(range5,values5,'gs--',fillstyle='none',label="5x5")
# plt.plot(range6,values6,'ys--',fillstyle='none',label="6x6")
# plt.plot(range7,values7,'ms--',fillstyle='none',label="7x7")
# plt.plot(range8,values8,'ks--',fillstyle='none',label="8x8")
# plt.plot(range9,values9,'s--',fillstyle='none',label="9x9")
# plt.plot(range10,values10,'s--',fillstyle='none',color='orange',label="10x10")
# plt.xticks([0.25,0.30,0.35,0.40,0.45,0.50,0.55,0.60,0.65,0.70,0.75,0.80,0.85,0.90,0.95,1.0],fontsize=7,rotation=45)
# plt.title('Success-Rate Difference with Uniform Noise Scaling')
# plt.ylabel(r'$(\sigma_{heuristic}-\sigma_{trivial})$')
# plt.xlabel(r'Percentage of QPU Lattice Utilized $\%$')
#################################Jan's plots#######################################################
#######################################4x4/6x6 no noise############################################
# values4heuristic = [0.977,0.968,0.958,0.947,0.937,0.925,0.914,0.871,0.826,0.8]
# values4trivial = [0.913,0.907,0.903,0.898,0.892,0.886,0.882,0.843,0.832,0.822]
# range = [0.1875,0.25,0.3125,0.375,0.4375,0.5,0.5625,0.625,0.9375,1]
# values4heuristic = [0.977,0.966,0.958,0.948,0.935,0.932,0.917,0.879,0.839,0.827,0.79,0.745,0.695,0.64,0.631]
# values4trivial = [0.826,0.822,0.817,0.813,0.807,0.802,0.796,0.769,0.749,0.744,0.726,0.708,0.69,0.669,0.674]
# range = [0.0833,0.1111,0.1388,0.1666,0.1944,0.2222,0.25,0.2777,0.4166,0.4444,0.5555,0.6944,0.8333,0.9722,1]
#######################################4x4/6x6 w/ uniform noise############################################
# values4heuristic = [0.915,0.88,0.831,0.805,0.773,0.733,0.695,0.584,0.464,0.42]
# values4trivial = [0.693,0.674,0.658,0.642,0.634,0.613,0.605,0.517,0.479,0.455]
# range = [0.1875,0.25,0.3125,0.375,0.4375,0.5,0.5625,0.625,0.9375,1]
# values4heuristic = [0.911,0.879,0.841,0.803,0.774,0.752,0.718,0.591,0.483,0.467,0.435,0.31,0.235,0.168,0.153]
# values4trivial = [0.463,0.451,0.445,0.431,0.42,0.416,0.4,0.342,0.31,0.304,0.281,0.257,0.225,0.2,0.195]
# range = [0.0833,0.1111,0.1388,0.1666,0.1944,0.2222,0.25,0.2777,0.4166,0.4444,0.5555,0.6944,0.8333,0.9722,1]
#######################################4x4/6x6 w/ exponential noise############################################
# values4heuristic = [0.955,0.937,0.917,0.898,0.876,0.862,0.841,0.763,0.674,0.644]
# values4trivial = [0.832,0.818,0.814,0.805,0.797,0.79,0.781,0.715,0.684,0.677]
# range = [0.1875,0.25,0.3125,0.375,0.4375,0.5,0.5625,0.625,0.9375,1]
# values4heuristic = [0.829,0.778,0.703,0.648,0.59,0.544,0.511,0.368,0.241,0.214,0.162,0.091,0.055,0.03,0.028]
# values4trivial = [0.211,0.198,0.188,0.188,0.174,0.165,0.163,0.113,0.094,0.094,0.077,0.058,0.05,0.03,0.028]
# range = [0.0833,0.1111,0.1388,0.1666,0.1944,0.2222,0.25,0.2777,0.4166,0.4444,0.5555,0.6944,0.8333,0.9722,1]

# yrange = [0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1.0]
# plt.xticks([0.05,0.1,0.15,0.2,0.25,0.30,0.35,0.40,0.45,0.50,0.55,0.60,0.65,0.70,0.75,0.80,0.85,0.90,0.95,1.0],fontsize=7,rotation=45)
# plt.plot(range,values4heuristic,'bs--',fillstyle='none',label="$\sigma_{heuristic}$")
# plt.plot(range,values4trivial,'gs--',fillstyle='none',label="$\sigma_{trivial}$")
# plt.title('Success-Rate with Exponential Noise Scaling')
# plt.ylabel(r'$\{\sigma_{heuristic},\sigma_{trivial}\}$')
# plt.xlabel(r'Percentage of QPU Lattice Utilized $\%$')

###################################################### MARTONOSI GRAPHS #####################################
valuesbrute = [0.961,0.909,0.842,0.947,0.923,0.885,0.924,0.922,0.926,0.938,0.962,0.902]
valuesheuristic = [0.922,0.854,0.787,0.908,0.866,0.831,0.871,0.872,0.878,0.89,0.937,0.851]
valuestrivial = [0.881,0.807,0.749,0.871,0.87,0.825,0.831,0.829,0.828,0.847,0.889,0.788]
width = 0.3
position1 = np.arange(len(valuesbrute))
position2 = [x + width for x in position1]
position3 = [x + width for x in position2]
fig  = plt.figure()
ax = fig.add_subplot(111)
bars1 = ax.bar(position1, valuesbrute, color='tomato', width=width, label='$\sigma_{brute}$')
bars2 = ax.bar(position2, valuesheuristic, color='royalblue', width=width, label='$\sigma_{heuristic}$')
bars3 = ax.bar(position3, valuestrivial, color='mediumseagreen', width=width, label='$\sigma_{trivial}$')

for bar in bars1:
    yval = bar.get_height()
    plt.text(bar.get_x(), yval - 0.125, yval,rotation=90,color='white',fontsize=12)
for bar in bars2:
    yval = bar.get_height()
    plt.text(bar.get_x(), yval - 0.125, yval,rotation=90,color='white',fontsize=12) 
for bar in bars3:
    yval = bar.get_height()
    plt.text(bar.get_x(), yval - 0.125, yval,rotation=90,color='white',fontsize=12) 

plt.xlabel('Physical Benchmarks',fontsize=15)
plt.xticks([r + width for r in range(len(position1))], ['HS2', 'HS4', 'HS6', 'BV4', 'BV6','BV8','Toffoli','Or','Fredkin','Peres','QFT','Adder'],fontsize=12,rotation=45)

plt.ylim(0.0, 1.0)
plt.ylabel('Success Rate',fontsize=15)
plt.title('Success Rates for Physical Benchmarks',fontsize=20)

#############################################################################################################
ax.set_axisbelow(True)
# plt.legend(loc='right', ncol=1)
plt.grid(linestyle='--',color='slategray',markersize=18)
plt.tight_layout()
plt.show()